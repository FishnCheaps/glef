#include <iostream>
#include "Glef.hpp"
int main() {
	Glef::use().CreateAndMakeActiveWindow();
	GfModel obj;
	GfModel obj2;
	GfModel land;
	//Testim
	std::vector<GLfloat> vec = {
		-1.0f,-1.0f,-1.0f,
		-1.0f,-1.0f, 1.0f,
		-1.0f, 1.0f, 1.0f,
		1.0f, 1.0f,-1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f,-1.0f,
		1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f,-1.0f,
		1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		-1.0f,-1.0f, 1.0f,
		1.0f,-1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f,-1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f,-1.0f,
		-1.0f, 1.0f,-1.0f,
		1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f, 1.0f,
		1.0f,-1.0f, 1.0f };
	std::vector<glm::vec3> normals{
		{ -0.000001, 0.000000, 1.000000 },
		{ -0.000000, -0.000000, 1.000000 },
		{ 0.000000, 1.000000, -0.000000 },
		{ 1.000000, -0.000000, 0.000000 },
		{ -0.000001, 0.000000, 1.000000 },
		{ -0.000000, -1.000000, 0.000000 },
		{ -1.000000, -0.000000, -0.000000 },
		{ -0.000001, 0.000000, 1.000000 },
		{ 0.000000, 0.000000, -1.000000 },
		{ 1.000000, -0.000000, 0.000000 },
		{ 0.000000, 0.000000, -1.000000 },
		{ -0.000001, 0.000000, 1.000000 },
		{ -0.000001, 0.000000, 1.000000 },
		{ 0.000000, 1.000000, -0.000000 },
		{ -0.000000, -1.000000, 0.000000 },
		{ -1.000000, -0.000000, -0.000000 },
		{ -0.000000, -0.000000, 1.000000 },
		{ -0.000001, 0.000000, 1.000000 },
		{ 0.000000, 1.000000, -0.000000 },
		{ -0.000000, -0.000000, 1.000000 },
		{ -1.000000, -0.000000, -0.000000 },
		{ 1.000000, 0.000000, 0.000001 },
		{ 0.000000, 0.000000, -1.000000 },
		{ 1.000000, -0.000000, 0.000000 },
		{ 0.000000, 0.000000, -1.000000 },
		{ 1.000000, 0.000000, 0.000001 },
		{ -1.000000, -0.000000, -0.000000 },
		{ 1.000000, 0.000000, 0.000001 },
		{ 1.000000, -0.000000, 0.000000 },
		{ -0.000000, -1.000000, 0.000000 },
		{ 1.000000, 0.000000, 0.000001 },
		{ -0.000000, -1.000000, 0.000000 },
		{ 0.000000, 1.000000, -0.000000 },
		{ 1.000000, 0.000000, 0.000001 },
		{ 0.000000, 1.000000, -0.000000 },
		{ -1.000000, -0.000000, -0.000000 }
	};
	std::vector<GLfloat> col = {
		0.583f,  0.771f,  0.014f,
		0.609f,  0.115f,  0.436f,
		0.327f,  0.483f,  0.844f,
		0.822f,  0.569f,  0.201f,
		0.435f,  0.602f,  0.223f,
		0.310f,  0.747f,  0.185f,
		0.597f,  0.770f,  0.761f,
		0.559f,  0.436f,  0.730f,
		0.359f,  0.583f,  0.152f,
		0.483f,  0.596f,  0.789f,
		0.559f,  0.861f,  0.639f,
		0.195f,  0.548f,  0.859f,
		0.014f,  0.184f,  0.576f,
		0.771f,  0.328f,  0.970f,
		0.406f,  0.615f,  0.116f,
		0.676f,  0.977f,  0.133f,
		0.971f,  0.572f,  0.833f,
		0.140f,  0.616f,  0.489f,
		0.997f,  0.513f,  0.064f,
		0.945f,  0.719f,  0.592f,
		0.543f,  0.021f,  0.978f,
		0.279f,  0.317f,  0.505f,
		0.167f,  0.620f,  0.077f,
		0.347f,  0.857f,  0.137f,
		0.055f,  0.953f,  0.042f,
		0.714f,  0.505f,  0.345f,
		0.783f,  0.290f,  0.734f,
		0.722f,  0.645f,  0.174f,
		0.302f,  0.455f,  0.848f,
		0.225f,  0.587f,  0.040f,
		0.517f,  0.713f,  0.338f,
		0.053f,  0.959f,  0.120f,
		0.393f,  0.621f,  0.362f,
		0.673f,  0.211f,  0.457f,
		0.820f,  0.883f,  0.371f,
		0.982f,  0.099f,  0.879f
	};

	std::vector<GLfloat> vec2 = {
		1.0f,1.0f,1.0f,
		1.0f,1.0f,-1.0f,
		0.0f,2.0f,0.0f,
		1.0f,1.0f,1.0f,
		-1.0f,1.0f,1.0f,
		0.0f,2.0f,0.0f,
		-1.0f,1.0f,-1.0f,
		-1.0f,1.0f,1.0f,
		0.0f,2.0f,0.0f,
		-1.0f,1.0f,-1.0f,
		1.0f,1.0f,-1.0f,
		0.0f,2.0f,0.0f,
		1.0f,1.0f,1.0f,
		-1.0f,1.0f,1.0f,
		-1.0f,1.0f,-1.0f,
		1.0f,1.0f,1.0f,
		1.0f,1.0f,-1.0f,
		-1.0f,1.0f,-1.0f,
	};
	std::vector<GLfloat> vec3 = {
		-10.0f,0.0f,-10.0f,
		10.0f,0.0f,-10.0f,
		10.0f,0.0f,10.0f,
		-10.0f,0.0f,-10.0f,
		-10.0f,0.0f,10.0f,
		10.0f,0.0f,10.0f
	};
	std::vector<GLfloat> col3 = {
		0.583f,  0.771f,  0.014f,
		0.609f,  0.115f,  0.436f,
		0.327f,  0.483f,  0.844f,
		0.822f,  0.569f,  0.201f,
		0.435f,  0.602f,  0.223f,
		0.310f,  0.747f,  0.185f };
	std::vector<GLfloat> col2 = {
		0.583f,  0.771f,  0.014f,
		0.609f,  0.115f,  0.436f,
		0.327f,  0.483f,  0.844f,
		0.822f,  0.569f,  0.201f,
		0.435f,  0.602f,  0.223f,
		0.310f,  0.747f,  0.185f,
		0.597f,  0.770f,  0.761f,
		0.559f,  0.436f,  0.730f,
		0.359f,  0.583f,  0.152f,
		0.483f,  0.596f,  0.789f,
		0.559f,  0.861f,  0.639f,
		0.195f,  0.548f,  0.859f,
		0.583f,  0.771f,  0.014f,
		0.609f,  0.115f,  0.436f,
		0.327f,  0.483f,  0.844f,
		0.822f,  0.569f,  0.201f,
		0.435f,  0.602f,  0.223f,
		0.310f,  0.747f,  0.185f };
	std::vector<GLfloat> uv= {
		0.000059f, 1.0f - 0.000004f,
		0.000103f, 1.0f - 0.336048f,
		0.335973f, 1.0f - 0.335903f,
		1.000023f, 1.0f - 0.000013f,
		0.667979f, 1.0f - 0.335851f,
		0.999958f, 1.0f - 0.336064f,
		0.667979f, 1.0f - 0.335851f,
		0.336024f, 1.0f - 0.671877f,
		0.667969f, 1.0f - 0.671889f,
		1.000023f, 1.0f - 0.000013f,
		0.668104f, 1.0f - 0.000013f,
		0.667979f, 1.0f - 0.335851f,
		0.000059f, 1.0f - 0.000004f,
		0.335973f, 1.0f - 0.335903f,
		0.336098f, 1.0f - 0.000071f,
		0.667979f, 1.0f - 0.335851f,
		0.335973f, 1.0f - 0.335903f,
		0.336024f, 1.0f - 0.671877f,
		1.000004f, 1.0f - 0.671847f,
		0.999958f, 1.0f - 0.336064f,
		0.667979f, 1.0f - 0.335851f,
		0.668104f, 1.0f - 0.000013f,
		0.335973f, 1.0f - 0.335903f,
		0.667979f, 1.0f - 0.335851f,
		0.335973f, 1.0f - 0.335903f,
		0.668104f, 1.0f - 0.000013f,
		0.336098f, 1.0f - 0.000071f,
		0.000103f, 1.0f - 0.336048f,
		0.000004f, 1.0f - 0.671870f,
		0.336024f, 1.0f - 0.671877f,
		0.000103f, 1.0f - 0.336048f,
		0.336024f, 1.0f - 0.671877f,
		0.335973f, 1.0f - 0.335903f,
		0.667969f, 1.0f - 0.671889f,
		1.000004f, 1.0f - 0.671847f,
		0.667979f, 1.0f - 0.335851f
	};

	auto shader = GfShaderFactory::use().loadShader("shaders/SimpleVertexShader.vertexshader", "shaders/SimpleFragmentShader.fragmentshader");
	auto shader2 = GfShaderFactory::use().loadShader("shaders/TransformVertexShader.vertexshader", "shaders/TextureFragmentShader.fragmentshader");
	auto shader3 = GfShaderFactory::use().loadShader("shaders/StandardShading.vertexshader", "shaders/StandardShading.fragmentshader");
	obj.setVertices(vec);
	//obj.setColor(col);
	obj.setShader(&shader3);
	obj.addTexture("uvtemplate.DDS", uv);
	obj.setNormals(normals);
	//obj2.setVertices(vec2);
	//obj2.setColor(col2);
	//obj2.setShader(&shader);
	//land.setVertices(vec3);
	//land.setColor(col3);
	//land.setShader(&shader);
	GfForce force;
	force.rot_x = 5;
	obj.force = &force;
	Glef::use().addObject(obj);
	//Glef::use().addObject(obj2);
	//Glef::use().addObject(land);
	//GfCamera cam=GfCameraFactory::use().getCamera(glm::vec3(4, 3, 3), glm::vec3(0, 0, 0));
	GfCameraActive cam = GfCameraFactory::use().getCameraActive(glm::vec3(4, 3, 3), glm::vec3(0, 0, 0));
	/*cam.position = glm::vec3(0, 0, 5);
	cam.horizontal_angle= 3.14f;
	cam.vertical_angle = 0.0f;
	cam.initial_fov = 45.0f;*/
	GfControls controls;
	cam.controls = controls;
	GfLight light;
	light.setup_light(&shader3, glm::vec3(0, 0, 0));
	Glef::use().lights.push_back(&light);
	//Uzhe net
	Glef::use().Proceed(&cam);
}